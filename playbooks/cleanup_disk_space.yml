---
- name: Cleanup Disk Space on All VMs
  hosts: all
  become: yes
  tasks:

    # Clean package caches (safe operation)
    - name: Clean YUM/DNF cache if RedHat-based
      when: ansible_facts['pkg_mgr'] in ['dnf', 'yum']
      block:
        - name: Clean YUM/DNF cache
          command: yum clean all
          args:
            warn: false
          ignore_errors: yes

    - name: Clean APT cache if Debian-based
      when: ansible_facts['pkg_mgr'] == 'apt'
      apt:
        autoclean: yes
        autoremove: yes
        clean: yes
      ignore_errors: yes

    # Remove pip cache (non-essential)
    - name: Remove root pip cache
      file:
        path: "/root/.cache/pip"
        state: absent
      ignore_errors: yes

    - name: Remove user pip caches
      shell: "rm -rf /home/*/.cache/pip"
      args:
        warn: false
      ignore_errors: yes

    # Truncate large log files instead of deleting them
    - name: Find log files over 100MB
      find:
        paths: /var/log
        patterns: "*.log"
        recurse: yes
        size: "+100M"
      register: large_logs

    - name: Truncate large log files
      file:
        path: "{{ item.path }}"
        state: touch
        mode: '0644'
      loop: "{{ large_logs.files }}"
      when: large_logs.matched > 0
      ignore_errors: yes

    # Remove temp files
    - name: Remove /tmp and /var/tmp files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/*
        - /var/tmp/*
      ignore_errors: yes

    # (Optional) If you suspect large stray files, you can find & print them.
    # Uncomment if you want to monitor large files, but do not delete automatically.
    # - name: Find large unused files over 500MB
    #   find:
    #     paths: /
    #     patterns: "*"
    #     file_type: file
    #     size: "+500M"
    #   register: large_files
    #   ignore_errors: yes

    # - name: List large files
    #   debug:
    #     msg: "Large file: {{ item.path }}"
    #   loop: "{{ large_files.files }}"
    #   when: large_files.matched > 0

    - name: Check disk usage after cleanup
      command: df -h
      register: disk_usage
      changed_when: false

    - name: Display disk usage
      debug:
        var: disk_usage.stdout_lines
