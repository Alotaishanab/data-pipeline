---
- name: Cleanup Disk Space on All VMs
  hosts: all
  become: yes
  tasks:

    - name: Clean YUM/DNF cache
      when: ansible_facts['pkg_mgr'] in ['dnf', 'yum']
      command: yum clean all
      ignore_errors: yes

    - name: Clean APT cache
      when: ansible_facts['pkg_mgr'] == 'apt'
      apt:
        autoclean: yes
        autoremove: yes
        clean: yes
      ignore_errors: yes

    - name: Remove old kernels (keep latest 2)
      when: ansible_facts['pkg_mgr'] in ['dnf', 'yum']
      shell: package-cleanup --oldkernels --count=2 -y
      ignore_errors: yes

    - name: Remove unused packages
      when: ansible_facts['pkg_mgr'] in ['dnf', 'yum']
      yum:
        name: "*"
        state: absent
        autoremove: yes
      ignore_errors: yes

    - name: Clean pip cache for root
      file:
        path: "/root/.cache/pip"
        state: absent
      ignore_errors: yes

    - name: Clean pip cache for all users
      file:
        path: "/home/{{ item }}/.cache/pip"
        state: absent
      loop: "{{ ansible_facts.users | default([]) }}"
      ignore_errors: yes

    - name: Truncate large log files over 100MB
      find:
        paths: /var/log
        patterns: "*.log"
        recurse: yes
        size: "+100M"
      register: large_logs

    - name: Truncate log files
      file:
        path: "{{ item.path }}"
        state: touch
        mode: '0644'
      loop: "{{ large_logs.files }}"
      when: large_logs.matched > 0
      ignore_errors: yes

    - name: Remove temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/*
        - /var/tmp/*
      ignore_errors: yes

    - name: Find large unused files over 500MB
      find:
        paths: /
        patterns: "*"
        file_type: file
        size: "+500M"
      register: large_files

    - name: List large files
      debug:
        msg: "Large file: {{ item.path }}"
      loop: "{{ large_files.files }}"

    # Uncomment the following to delete large files automatically
    # - name: Delete large files over 500MB
    #   file:
    #     path: "{{ item.path }}"
    #     state: absent
    #   loop: "{{ large_files.files }}"
    #   when: "'/important/path' not in item.path"  # Add conditions as needed
    #   ignore_errors: yes

    - name: Check disk usage after cleanup
      command: df -h
      register: disk_usage

    - name: Display disk usage
      debug:
        var: disk_usage.stdout_lines
