---
- name: Setup Monitoring and Logging on All Hosts
  hosts: all
  become: yes
  tasks:
    #### Install Prometheus Node Exporter
    - name: Install Prometheus Node Exporter
      block:
        - name: Download Node Exporter binary
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz"
            dest: "/tmp/node_exporter.tar.gz"
            mode: '0644'
            force: yes  # Force re-download to ensure we have the correct file

        - name: Extract Node Exporter
          unarchive:
            src: "/tmp/node_exporter.tar.gz"
            dest: "/usr/local/bin/"
            remote_src: yes
            extra_opts: [--strip-components=1]
            # Removed 'creates' parameter to force extraction

        - name: Ensure Node Exporter binary is executable
          file:
            path: /usr/local/bin/node_exporter
            owner: root
            group: root
            mode: '0755'

        - name: Create Node Exporter service
          copy:
            dest: /etc/systemd/system/node_exporter.service
            content: |
              [Unit]
              Description=Node Exporter
              After=network.target

              [Service]
              User=root
              ExecStart=/usr/local/bin/node_exporter
              Restart=always

              [Install]
              WantedBy=multi-user.target
            owner: root
            group: root
            mode: '0644'

        - name: Reload systemd daemon for Node Exporter
          systemd:
            daemon_reload: yes

        - name: Start and enable Node Exporter service
          systemd:
            name: node_exporter
            state: started
            enabled: yes

    #### Configure Firewall to Allow Node Exporter Port (9100)
    - name: Open port 9100 in firewalld
      firewalld:
        port: 9100/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

- name: Install and Configure Prometheus on Control Node
  hosts: localhost
  become: yes
  tasks:
    - name: Create Prometheus user and group
      user:
        name: prometheus
        system: yes
        shell: /sbin/nologin

    - name: Download Prometheus binary
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz"
        dest: "/tmp/prometheus.tar.gz"
        mode: '0644'
        force: yes  # Force re-download to ensure we have the correct file

    - name: Extract Prometheus
      unarchive:
        src: "/tmp/prometheus.tar.gz"
        dest: "/tmp/"
        remote_src: yes
        extra_opts: [--strip-components=1]
        # Removed 'creates' parameter to force extraction

    - name: Move Prometheus binaries to /usr/local/bin/
      copy:
        src: "/tmp/prometheus-2.47.0.linux-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'
      loop:
        - prometheus
        - promtool

    - name: Move Prometheus consoles directory
      copy:
        src: "/tmp/prometheus-2.47.0.linux-amd64/consoles"
        dest: "/etc/prometheus/consoles"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'
        recurse: yes

    - name: Move Prometheus console_libraries directory
      copy:
        src: "/tmp/prometheus-2.47.0.linux-amd64/console_libraries"
        dest: "/etc/prometheus/console_libraries"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'
        recurse: yes

    - name: Create Prometheus directories
      file:
        path: "{{ item }}"
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
      loop:
        - /var/lib/prometheus
        - /etc/prometheus

    - name: Generate Prometheus configuration file
      copy:
        dest: /etc/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']

            - job_name: 'node_exporter'
              static_configs:
                - targets:
      {% for host in groups['all'] %}
                    - '{{ hostvars[host].ansible_default_ipv4.address }}:9100'
      {% endfor %}
        owner: prometheus
        group: prometheus
        mode: '0644'

    - name: Set ownership of Prometheus binaries
      file:
        path: "{{ item }}"
        owner: prometheus
        group: prometheus
      loop:
        - /usr/local/bin/prometheus
        - /usr/local/bin/promtool

    - name: Create Prometheus service
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus Service
          After=network.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus/ \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries

          [Install]
          WantedBy=multi-user.target
        owner: prometheus
        group: prometheus
        mode: '0644'

    - name: Reload systemd daemon for Prometheus
      systemd:
        daemon_reload: yes

    - name: Start and enable Prometheus service
      systemd:
        name: prometheus
        state: started
        enabled: yes

    #### Configure Firewall to Allow Prometheus Port (9090)
    - name: Open port 9090 in firewalld
      firewalld:
        port: 9090/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

- name: Install and Configure Grafana on Control Node
  hosts: localhost
  become: yes
  tasks:
    - name: Add Grafana repository
      yum_repository:
        name: grafana
        description: Grafana Repository
        baseurl: https://packages.grafana.com/oss/rpm
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://packages.grafana.com/gpg.key
        enabled: yes

    - name: Install Grafana
      yum:
        name: grafana
        state: present

    - name: Install initscripts package (for systemd-sysv-install)
      yum:
        name: initscripts
        state: present

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Ensure Grafana directories have correct ownership
      file:
        path: "{{ item }}"
        state: directory
        owner: grafana
        group: grafana
        recurse: yes
      loop:
        - /var/lib/grafana
        - /var/log/grafana
        - /etc/grafana

    - name: Start and enable Grafana service
      systemd:
        name: grafana-server
        state: started
        enabled: yes

    - name: Fetch Grafana service logs
      shell: journalctl -u grafana-server -b --no-pager
      register: grafana_logs
      ignore_errors: yes

    - name: Display Grafana service logs
      debug:
        var: grafana_logs.stdout

    - name: Verify default Grafana service file exists
      stat:
        path: /usr/lib/systemd/system/grafana-server.service
      register: default_grafana_service

    - name: Debug default Grafana service file status
      debug:
        msg: "Default Grafana service file exists: {{ default_grafana_service.stat.exists }}"

- name: Configure Logging on All Hosts
  hosts: all
  become: yes
  tasks:
    - name: Install rsyslog
      yum:
        name: rsyslog
        state: present

    - name: Configure rsyslog to send logs to control node
      lineinfile:
        path: /etc/rsyslog.conf
        regexp: '^\*\.\*'
        line: "*.* @@{{ hostvars['localhost']['ansible_default_ipv4']['address'] }}:514"
        state: present

    - name: Restart rsyslog
      systemd:
        name: rsyslog
        state: restarted
