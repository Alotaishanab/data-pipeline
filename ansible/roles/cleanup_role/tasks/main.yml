- name: Clean YUM/DNF cache if RedHat-based
  when: ansible_facts['pkg_mgr'] in ['dnf', 'yum']
  command: yum clean all
  ignore_errors: yes

- name: Clean APT cache if Debian-based
  when: ansible_facts['pkg_mgr'] == 'apt'
  apt:
    autoclean: yes
    autoremove: yes
    clean: yes
  ignore_errors: yes

- name: Remove root pip cache
  file:
    path: "/root/.cache/pip"
    state: absent
  ignore_errors: yes

- name: Remove user pip caches
  shell: rm -rf /home/*/.cache/pip
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Find log files over 100MB using shell
  shell: find /var/log -type f -name '*.log' -size +100M
  register: large_logs_shell
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Truncate large log files
  shell: truncate -s 0 "{{ item }}"
  loop: "{{ large_logs_shell.stdout_lines | default([]) }}"
  args:
    executable: /bin/bash
  when: large_logs_shell.stdout_lines is defined and large_logs_shell.stdout_lines|length > 0
  ignore_errors: yes

- name: Remove /tmp and /var/tmp files
  shell: rm -rf /tmp/* /var/tmp/*
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Find files larger than 750MB in /home/almalinux
  shell: find /home/almalinux -type f -size +750M
  register: large_files
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Remove files larger than 750MB found
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ large_files.stdout_lines | default([]) }}"
  when: large_files.stdout_lines is defined and large_files.stdout_lines|length > 0
  ignore_errors: yes

- name: Check disk usage after cleanup
  command: df -h
  register: disk_usage
  changed_when: false

- name: Display disk usage
  debug:
    var: disk_usage.stdout_lines
