# celery_setup.yml

---
- name: Setup Celery Workers
  hosts: workers
  become: yes
  vars:
    redis_host: "{{ hostvars['storage']['ansible_host'] }}"
    celery_user: "almalinux"
    celery_group: "almalinux"
    virtualenv_path: "/opt/merizo_search/merizosearch_env"
    celery_bin: "{{ virtualenv_path }}/bin/celery"
    worker_queues:
      worker1: "worker1_queue"
      worker2: "worker2_queue"
      worker3: "worker3_queue"
  tasks:
    - name: Install Celery and Redis Python packages in virtualenv
      pip:
        name:
          - celery
          - redis
        virtualenv: "{{ virtualenv_path }}"
        state: present

    - name: Create data pipeline directory
      file:
        path: /opt/data_pipeline/
        state: directory
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'

    - name: Deploy Updated Celery Worker Script
      copy:
        dest: /opt/data_pipeline/celery_worker.py
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'
        content: |
          from celery import Celery
          import subprocess
          import os

          # Define the Redis broker URL
          app = Celery('celery_worker', broker='redis://{{ redis_host }}:6379/0')

          @app.task
          def run_pipeline(input_dir, output_dir, organism):
              """
              Celery task to run the data pipeline on a specified input directory.
              
              :param input_dir: Path to the input .pdb file
              :param output_dir: Directory where output files will be saved
              :param organism: Organism type ('human' or 'ecoli')
              """
              pipeline_script = "/opt/data_pipeline/pipeline_script.py"
              cmd = [
                  "/opt/merizo_search/merizosearch_env/bin/python3",
                  pipeline_script,
                  input_dir,
                  output_dir,
                  organism
              ]
              try:
                  process = subprocess.run(cmd, capture_output=True, text=True, check=True)
                  return {
                      'stdout': process.stdout,
                      'stderr': process.stderr,
                      'returncode': process.returncode
                  }
              except subprocess.CalledProcessError as e:
                  return {
                      'stdout': e.stdout,
                      'stderr': e.stderr,
                      'returncode': e.returncode
                  }

    - name: Create Celery Startup Shell Script
      copy:
        dest: /opt/data_pipeline/start_celery.sh
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'
        content: |
          #!/bin/bash
          source {{ virtualenv_path }}/bin/activate
          exec {{ celery_bin }} -A celery_worker worker --loglevel=info --concurrency=4 --queues={{ worker_queues[inventory_hostname] }}

    - name: Deploy Updated Celery Service File
      copy:
        dest: /etc/systemd/system/celery.service
        owner: root
        group: root
        mode: '0644'
        content: |
          [Unit]
          Description=Celery Service
          After=network.target

          [Service]
          Type=simple
          User={{ celery_user }}
          Group={{ celery_group }}
          WorkingDirectory=/opt/data_pipeline/
          ExecStart=/opt/data_pipeline/start_celery.sh
          Restart=always

          [Install]
          WantedBy=multi-user.target
        force: yes

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Restart and enable Celery service
      systemd:
        name: celery
        state: restarted
        enabled: yes

    - name: Ensure Celery worker script is executable
      file:
        path: /opt/data_pipeline/celery_worker.py
        mode: '0755'

    - name: Upgrade networkx in virtualenv
      pip:
        name: networkx
        virtualenv: "{{ virtualenv_path }}"
        state: latest

- name: Setup Celery on Management Node
  hosts: host
  become: yes
  vars:
    redis_host: "{{ hostvars['storage']['ansible_host'] }}"
    celery_user: "almalinux"
    celery_group: "almalinux"
    worker_queues:
      worker1: "worker1_queue"
      worker2: "worker2_queue"
      worker3: "worker3_queue"
  tasks:
    - name: Install Celery and Redis Python packages globally
      pip:
        name:
          - celery
          - redis
        state: present

    - name: Create data pipeline directory on host
      file:
        path: /opt/data_pipeline/
        state: directory
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'

    - name: Deploy Dispatch Tasks Script on host
      copy:
        dest: /opt/data_pipeline/dispatch_tasks.py
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'
        content: |
          import sys
          import redis
          from celery import Celery

          redis_host = "{{ redis_host }}"
          redis_port = 6379
          redis_db = 0

          # Worker queue mapping, derived from Ansible var
          WORKER_QUEUES = {
          {% for w, q in worker_queues.items() %}
            "{{ w }}": "{{ q }}"{% if not loop.last %},{% endif %}
          {% endfor %}
          }

          app = Celery('celery_worker', broker='redis://{}:{}/0'.format(redis_host, redis_port))

          def get_enabled_workers():
              r = redis.Redis(host=redis_host, port=redis_port, db=redis_db)
              disabled = r.smembers('disabled_workers')
              disabled = {d.decode('utf-8') for d in disabled}
              enabled = {w: q for w, q in WORKER_QUEUES.items() if w not in disabled}
              return enabled

          if __name__ == "__main__":
              if len(sys.argv) != 4:
                  print("Usage: python3 dispatch_tasks.py [INPUT FILE] [OUTPUT DIRECTORY] [ORGANISM]")
                  sys.exit(1)

              input_file = sys.argv[1]
              output_dir = sys.argv[2]
              organism = sys.argv[3].lower()

              if organism not in ["human", "ecoli", "test"]:
                  print("Error: ORGANISM must be either 'human' or 'ecoli'")
                  sys.exit(1)

              enabled_workers = get_enabled_workers()
              if not enabled_workers:
                  print("No enabled workers available. Check CPU load or alerts.")
                  sys.exit(1)

              # Just pick one enabled worker arbitrarily
              some_worker, queue_name = next(iter(enabled_workers.items()))

              result = app.send_task('celery_worker.run_pipeline',
                                     args=[input_file, output_dir, organism],
                                     queue=queue_name)
              print(f"Task {result.id} dispatched to {some_worker} with organism '{organism}'")
