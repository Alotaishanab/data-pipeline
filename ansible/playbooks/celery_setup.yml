- name: Setup Celery Workers
  hosts: workers
  become: yes
  vars:
    redis_host: "{{ hostvars['storage']['ansible_host'] }}"
    celery_user: "almalinux"
    celery_group: "almalinux"
    virtualenv_path: "/opt/merizo_search/merizosearch_env"
    celery_bin: "{{ virtualenv_path }}/bin/celery"
    worker_queues:
      worker1: "worker1_queue"
      worker2: "worker2_queue"
      worker3: "worker3_queue"
  tasks:
    - name: Install Celery and Redis Python packages in virtualenv
      pip:
        name:
          - celery
          - redis
        virtualenv: "{{ virtualenv_path }}"
        state: present

    - name: Create data pipeline directory
      file:
        path: /opt/data_pipeline/
        state: directory
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'

    - name: Deploy Celery Worker Script
      copy:
        dest: /opt/data_pipeline/celery_worker.py
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'
        content: |
          import logging
          from celery import Celery
          import subprocess
          import os

          # Configure logging
          logging.basicConfig(
              filename='/opt/data_pipeline/celery_worker.log',
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s'
          )

          # Define the Redis broker URL
          app = Celery('celery_worker', broker='redis://{{ redis_host }}:6379/0')

          @app.task
          def run_pipeline(pdb_file, output_dir, organism):
              """
              Celery task to run the data pipeline on a specified PDB file.
              """
              print(f"Received PDB File: {pdb_file}")
              pipeline_script = "/opt/data_pipeline/pipeline_script.py"
              cmd = [
                  "/opt/merizo_search/merizosearch_env/bin/python3",
                  pipeline_script,
                  pdb_file,
                  output_dir,
                  organism
              ]
              logging.info(f"Running pipeline script: {' '.join(cmd)}")
              try:
                  process = subprocess.run(cmd, capture_output=True, text=True, check=True)
                  logging.info(f"Pipeline STDOUT: {process.stdout}")
                  logging.info(f"Pipeline STDERR: {process.stderr}")
                  return {
                      'stdout': process.stdout,
                      'stderr': process.stderr,
                      'returncode': process.returncode
                  }
              except subprocess.CalledProcessError as e:
                  logging.error(f"Pipeline encountered an error: {e.stderr}")
                  return {
                      'stdout': e.stdout,
                      'stderr': e.stderr,
                      'returncode': e.returncode
                  }

    - name: Set worker name
      set_fact:
        worker_name: "{{ inventory_hostname.split('-')[0] }}"

    - name: Create Celery Startup Shell Script
      copy:
        dest: /opt/data_pipeline/start_celery.sh
        owner: "{{ celery_user }}"
        group: "{{ celery_group }}"
        mode: '0755'
        content: |
          #!/bin/bash
          source {{ virtualenv_path }}/bin/activate
          exec {{ celery_bin }} -A celery_worker worker --loglevel=info --concurrency=4 --queues={{ worker_queues[worker_name] }} -n {{ worker_name }}

    - name: Deploy Celery Worker systemd Service File
      copy:
        dest: /etc/systemd/system/celery.service
        owner: root
        group: root
        mode: '0644'
        content: |
          [Unit]
          Description=Celery Service
          After=network.target

          [Service]
          Type=simple
          User={{ celery_user }}
          Group={{ celery_group }}
          WorkingDirectory=/opt/data_pipeline/
          ExecStart=/opt/data_pipeline/start_celery.sh
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Restart and enable Celery service
      systemd:
        name: celery
        state: restarted
        enabled: yes

    - name: Ensure Celery worker script is executable
      file:
        path: /opt/data_pipeline/celery_worker.py
        mode: '0755'
