- name: Setup Monitoring and Logging on All Hosts
  hosts: all
  become: yes
  tasks:
    - name: Install EPEL repository
      yum:
        name: epel-release
        state: present

    
    - name: Ensure firewalld is running and enabled
      systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Install Prometheus Node Exporter
      block:
        - name: Create node_exporter user
          user:
            name: node_exporter
            shell: /sbin/nologin
            system: yes

        - name: Download Node Exporter binary
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz"
            dest: "/tmp/node_exporter.tar.gz"
            mode: '0644'
            force: yes  

        - name: Extract Node Exporter
          unarchive:
            src: "/tmp/node_exporter.tar.gz"
            dest: "/usr/local/bin/"
            remote_src: yes
            extra_opts: [--strip-components=1]

        - name: Ensure Node Exporter binary is executable
          file:
            path: /usr/local/bin/node_exporter
            owner: node_exporter
            group: node_exporter
            mode: '0755'

        - name: Create Node Exporter systemd service
          copy:
            dest: /etc/systemd/system/node_exporter.service
            content: |
              [Unit]
              Description=Prometheus Node Exporter
              After=network.target

              [Service]
              User=node_exporter
              Group=node_exporter
              Type=simple
              ExecStart=/usr/local/bin/node_exporter
              Restart=always

              [Install]
              WantedBy=multi-user.target
            owner: root
            group: root
            mode: '0644'

        - name: Reload systemd daemon for Node Exporter
          systemd:
            daemon_reload: yes

        - name: Start and enable Node Exporter service
          systemd:
            name: node_exporter
            state: started
            enabled: yes

    - name: Open port 9100 in firewalld
      firewalld:
        port: 9100/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

    - name: Install httpd
      yum:
        name: httpd
        state: present

    - name: Ensure httpd service is started and enabled
      systemd:
        name: httpd
        state: started
        enabled: yes

    - name: Open port 80 in firewalld for httpd
      firewalld:
        port: 80/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes for httpd
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

- name: Install and Configure Prometheus on Control Node
  hosts: localhost
  become: yes
  tasks:
    - name: Create Prometheus user and group
      user:
        name: prometheus
        system: yes
        shell: /sbin/nologin

    - name: Download Prometheus binary
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz"
        dest: "/tmp/prometheus.tar.gz"
        mode: '0644'
        force: yes

    - name: Create /tmp/prometheus directory
      file:
        path: /tmp/prometheus
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Extract Prometheus
      unarchive:
        src: "/tmp/prometheus.tar.gz"
        dest: "/tmp/prometheus/"
        remote_src: yes
        extra_opts: ['--strip-components=1']

    - name: Move Prometheus binaries to /usr/local/bin/
      copy:
        src: "/tmp/prometheus/prometheus"
        dest: "/usr/local/bin/prometheus"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Move Prometheus promtool binary to /usr/local/bin/
      copy:
        src: "/tmp/prometheus/promtool"
        dest: "/usr/local/bin/promtool"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Create Prometheus directories
      file:
        path: "{{ item }}"
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
      loop:
        - /var/lib/prometheus
        - /etc/prometheus

    - name: Move Prometheus consoles directory
      copy:
        src: "/tmp/prometheus/consoles"
        dest: "/etc/prometheus/consoles"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Move Prometheus console_libraries directory
      copy:
        src: "/tmp/prometheus/console_libraries"
        dest: "/etc/prometheus/console_libraries"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Set ownership and permissions for /etc/prometheus/consoles
      file:
        path: /etc/prometheus/consoles
        owner: prometheus
        group: prometheus
        mode: '0755'
        recurse: yes

    - name: Set ownership and permissions for /etc/prometheus/console_libraries
      file:
        path: /etc/prometheus/console_libraries
        owner: prometheus
        group: prometheus
        mode: '0755'
        recurse: yes

    - name: Generate Prometheus configuration file
      copy:
        dest: /etc/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s

          alerting:
            alertmanagers:
              - static_configs:
                  - targets: ['localhost:9093']

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']

            - job_name: 'node_exporter'
              static_configs:
                - targets:
                    {% for host in groups['all'] %}
                      - '{{ hostvars[host].ansible_default_ipv4.address }}:9100'
                    {% endfor %}
        owner: prometheus
        group: prometheus
        mode: '0644'

    - name: Set ownership of Prometheus binaries
      file:
        path: "{{ item }}"
        owner: prometheus
        group: prometheus
      loop:
        - /usr/local/bin/prometheus
        - /usr/local/bin/promtool

    - name: Deploy Prometheus Alert Rules
      include_role:
        name: prometheus_alerts

    - name: Open port 9090 in firewalld
      firewalld:
        port: 9090/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

    - name: Create Prometheus systemd service
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus Service
          After=network.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus/ \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd daemon for Prometheus
      systemd:
        daemon_reload: yes

    - name: Start and enable Prometheus service
      systemd:
        name: prometheus
        state: started
        enabled: yes

- name: Install and Configure Grafana on Control Node
  hosts: localhost
  become: yes
  tasks:
    - name: Add Grafana repository
      yum_repository:
        name: grafana
        description: Grafana Repository
        baseurl: https://packages.grafana.com/oss/rpm
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://packages.grafana.com/gpg.key
        enabled: yes

    - name: Install Grafana
      yum:
        name: grafana
        state: present

    - name: Install initscripts package (for systemd-sysv-install)
      yum:
        name: initscripts
        state: present

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Ensure Grafana directories have correct ownership
      file:
        path: "{{ item }}"
        state: directory
        owner: grafana
        group: grafana
        recurse: yes
      loop:
        - /var/lib/grafana
        - /var/log/grafana
        - /etc/grafana

    - name: Open port 3000 in firewalld
      firewalld:
        port: 3000/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes for Grafana
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

    - name: Start and enable Grafana service
      systemd:
        name: grafana-server
        state: started
        enabled: yes

    - name: Create Grafana provisioning directories for dashboards
      file:
        path: /etc/grafana/provisioning/dashboards
        state: directory
        owner: grafana
        group: grafana
        mode: '0755'

    - name: Replace datasource placeholder in cw.json
      replace:
        path: "{{ playbook_dir }}/../dashboard/cw.json"
        regexp: '\$\{datasource\}'
        replace: 'prometheus'

    - name: Copy Dashboard JSON
      copy:
        src: "{{ playbook_dir }}/../dashboard/cw.json"
        dest: /etc/grafana/provisioning/dashboards/cw.json
        owner: grafana
        group: grafana
        mode: '0644'

    - name: Create Dashboard Provisioning YAML
      copy:
        dest: /etc/grafana/provisioning/dashboards/dashboards.yml
        content: |
          apiVersion: 1

          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              options:
                path: /etc/grafana/provisioning/dashboards
        owner: grafana
        group: grafana
        mode: '0644'

    - name: Create Grafana provisioning directories for datasources
      file:
        path: /etc/grafana/provisioning/datasources
        state: directory
        owner: grafana
        group: grafana
        mode: '0755'

    - name: Copy Prometheus Data Source Provisioning
      copy:
        src: "{{ playbook_dir }}/../datasource/prometheus.yml"
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        owner: grafana
        group: grafana
        mode: '0644'

    - name: Set Grafana admin user
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^admin_user'
        line: 'admin_user = admin'

    - name: Set Grafana admin password
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^admin_password'
        line: 'admin_password = admin'

    - name: Restart Grafana to apply provisioning changes
      systemd:
        name: grafana-server
        state: restarted
      when: ansible_os_family == "RedHat"  


- name: Configure Logging on All Hosts
  hosts: all
  become: yes
  tasks:
    - name: Install rsyslog
      yum:
        name: rsyslog
        state: present

    - name: Open port 514 in firewalld for rsyslog
      firewalld:
        port: 514/tcp
        permanent: yes
        state: enabled
      when: ansible_service_mgr == 'systemd'

    - name: Reload firewalld to apply changes for rsyslog
      service:
        name: firewalld
        state: reloaded
      when: ansible_service_mgr == 'systemd'

    - name: Configure rsyslog to send logs to control node
      lineinfile:
        path: /etc/rsyslog.conf
        regexp: '^\*\.\* @@{{ hostvars["localhost"]["ansible_default_ipv4"]["address"] }}:514'
        line: "*.* @@{{ hostvars['localhost']['ansible_default_ipv4']['address'] }}:514"
        state: present

    - name: Start and enable rsyslog service
      systemd:
        name: rsyslog
        state: started
        enabled: yes