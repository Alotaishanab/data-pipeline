###############################################################################
# monitoring_and_logging.yml
###############################################################################

- name: Setup Monitoring, Logging, and Web Server on Management Node
  hosts: mgmtnode  # Targeting the management node group
  become: yes
  gather_facts: yes
  vars:
    admin_email: "{{ lookup('env', 'ADMIN_EMAIL') }}"
    base_domain: "harvesterhci.io"
  tasks:
    #### Install Prometheus Node Exporter
    - name: Install Prometheus Node Exporter
      block:
        - name: Download Node Exporter binary
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz"
            dest: "/tmp/node_exporter.tar.gz"
            mode: '0644'
            force: yes

        - name: Extract Node Exporter
          unarchive:
            src: "/tmp/node_exporter.tar.gz"
            dest: "/usr/local/bin/"
            remote_src: yes
            extra_opts: [--strip-components=1]

        - name: Ensure Node Exporter binary is executable
          file:
            path: /usr/local/bin/node_exporter
            owner: root
            group: root
            mode: '0755'

        - name: Create Node Exporter service
          copy:
            dest: /etc/systemd/system/node_exporter.service
            content: |
              [Unit]
              Description=Node Exporter
              After=network.target

              [Service]
              User=root
              ExecStart=/usr/local/bin/node_exporter
              Restart=always

              [Install]
              WantedBy=multi-user.target
            owner: root
            group: root
            mode: '0644'

        - name: Reload systemd daemon for Node Exporter
          systemd:
            daemon_reload: yes

        - name: Start and enable Node Exporter service
          systemd:
            name: node_exporter
            state: started
            enabled: yes

    #### Install and Configure Prometheus
    - name: Install Prometheus
      block:
        - name: Create Prometheus user and group
          user:
            name: prometheus
            system: yes
            shell: /sbin/nologin

        - name: Download Prometheus binary
          get_url:
            url: "https://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz"
            dest: "/tmp/prometheus.tar.gz"
            mode: '0644'
            force: yes

        - name: Extract Prometheus
          unarchive:
            src: "/tmp/prometheus.tar.gz"
            dest: "/tmp/prometheus/"
            remote_src: yes
            extra_opts: ['--strip-components=1']

        - name: Move Prometheus binaries to /usr/local/bin/
          copy:
            src: "/tmp/prometheus/prometheus"
            dest: "/usr/local/bin/prometheus"
            remote_src: yes
            owner: prometheus
            group: prometheus
            mode: '0755'

        - name: Move Prometheus promtool binary to /usr/local/bin/
          copy:
            src: "/tmp/prometheus/promtool"
            dest: "/usr/local/bin/promtool"
            remote_src: yes
            owner: prometheus
            group: prometheus
            mode: '0755'

        - name: Create Prometheus directories
          file:
            path: "{{ item }}"
            state: directory
            owner: prometheus
            group: prometheus
            mode: '0755'
          loop:
            - /var/lib/prometheus
            - /etc/prometheus

        - name: Move Prometheus consoles directory
          copy:
            src: "/tmp/prometheus/consoles"
            dest: "/etc/prometheus/consoles"
            remote_src: yes
            owner: prometheus
            group: prometheus
            mode: '0755'

        - name: Move Prometheus console_libraries directory
          copy:
            src: "/tmp/prometheus/console_libraries"
            dest: "/etc/prometheus/console_libraries"
            remote_src: yes
            owner: prometheus
            group: prometheus
            mode: '0755'

        - name: Set ownership and permissions for Prometheus directories
          file:
            path: "{{ item }}"
            owner: prometheus
            group: prometheus
            mode: '0755'
            recurse: yes
          loop:
            - /etc/prometheus/consoles
            - /etc/prometheus/console_libraries

        - name: Generate Prometheus configuration file
          copy:
            dest: /etc/prometheus/prometheus.yml
            content: |
              global:
                scrape_interval: 15s

              alerting:
                alertmanagers:
                  - static_configs:
                      - targets: ['localhost:9093']

              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                    - targets: ['localhost:{{ condenser_ingress_prometheus_port }}']

                - job_name: 'node_exporter'
                  static_configs:
                    - targets: ['localhost:{{ condenser_ingress_nodeexporter_port }}']
            owner: prometheus
            group: prometheus
            mode: '0644'

        - name: Set ownership of Prometheus binaries
          file:
            path: "{{ item }}"
            owner: prometheus
            group: prometheus
          loop:
            - /usr/local/bin/prometheus
            - /usr/local/bin/promtool

        - name: Deploy Prometheus Alert Rules
          include_role:
            name: prometheus_alerts

        - name: Create Prometheus service
          copy:
            dest: /etc/systemd/system/prometheus.service
            content: |
              [Unit]
              Description=Prometheus Service
              After=network.target

              [Service]
              User=prometheus
              Group=prometheus
              Type=simple
              ExecStart=/usr/local/bin/prometheus \
                --config.file=/etc/prometheus/prometheus.yml \
                --storage.tsdb.path=/var/lib/prometheus/ \
                --web.console.templates=/etc/prometheus/consoles \
                --web.console.libraries=/etc/prometheus/console_libraries

              [Install]
              WantedBy=multi-user.target
            owner: prometheus
            group: prometheus
            mode: '0644'

        - name: Reload systemd daemon for Prometheus
          systemd:
            daemon_reload: yes

        - name: Start and enable Prometheus service
          systemd:
            name: prometheus
            state: started
            enabled: yes

    #### Install and Configure Grafana
    - name: Install and Configure Grafana
      block:
        - name: Add Grafana repository
          yum_repository:
            name: grafana
            description: Grafana Repository
            baseurl: https://packages.grafana.com/oss/rpm
            gpgcheck: yes
            repo_gpgcheck: yes
            gpgkey: https://packages.grafana.com/gpg.key
            enabled: yes

        - name: Install Grafana
          yum:
            name: grafana
            state: present

        - name: Start and enable Grafana service
          systemd:
            name: grafana-server
            state: started
            enabled: yes

        - name: Create Grafana provisioning directories for dashboards
          file:
            path: /etc/grafana/provisioning/dashboards
            state: directory
            owner: grafana
            group: grafana
            mode: '0755'

        - name: Copy Dashboard JSON
          copy:
            src: "{{ playbook_dir }}/../dashboard/cw.json"
            dest: /etc/grafana/provisioning/dashboards/cw.json
            owner: grafana
            group: grafana
            mode: '0644'
          notify: Restart Grafana

        - name: Create Dashboard Provisioning YAML
          copy:
            dest: /etc/grafana/provisioning/dashboards/dashboards.yml
            content: |
              apiVersion: 1

              providers:
                - name: 'default'
                  orgId: 1
                  folder: ''
                  type: file
                  options:
                    path: /etc/grafana/provisioning/dashboards
            owner: grafana
            group: grafana
            mode: '0644'

        - name: Create Grafana provisioning directories for datasources
          file:
            path: /etc/grafana/provisioning/datasources
            state: directory
            owner: grafana
            group: grafana
            mode: '0755'

        - name: Copy Prometheus Data Source Provisioning
          copy:
            src: "{{ playbook_dir }}/../datasource/prometheus.yml"
            dest: /etc/grafana/provisioning/datasources/prometheus.yml
            owner: grafana
            group: grafana
            mode: '0644'

        - name: Set Grafana admin user and password
          block:
            - name: Set Grafana admin user
              lineinfile:
                path: /etc/grafana/grafana.ini
                regexp: '^admin_user'
                line: 'admin_user = admin'

            - name: Set Grafana admin password
              lineinfile:
                path: /etc/grafana/grafana.ini
                regexp: '^admin_password'
                line: 'admin_password = admin'
          notify: Restart Grafana

    #### Configure Firewall to Allow Required Ports
    - name: Open necessary ports in firewalld
      firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
      loop:
        - http
        - https
      when: condenser_ingress_isAllowed | bool and condenser_ingress_isEnabled | bool

    - name: Reload firewalld to apply changes
      service:
        name: firewalld
        state: reloaded
      when: condenser_ingress_isAllowed | bool and condenser_ingress_isEnabled | bool


    #### Setup SSL with Let's Encrypt
    - name: Obtain SSL Certificate with Certbot
      block:
        - name: Install Certbot Nginx plugin
          yum:
            name: python3-certbot-nginx
            state: present

        - name: Obtain SSL certificate for Prometheus
          command: >
            certbot --nginx
            --non-interactive
            --agree-tos
            --email {{ admin_email }}
            -d {{ condenser_ingress_prometheus_hostname }}
          args:
            creates: /etc/letsencrypt/live/{{ condenser_ingress_prometheus_hostname }}/fullchain.pem

        - name: Obtain SSL certificate for Grafana
          command: >
            certbot --nginx
            --non-interactive
            --agree-tos
            --email {{ admin_email }}
            -d {{ condenser_ingress_grafana_hostname }}
          args:
            creates: /etc/letsencrypt/live/{{ condenser_ingress_grafana_hostname }}/fullchain.pem

        - name: Obtain SSL certificate for Node Exporter
          command: >
            certbot --nginx
            --non-interactive
            --agree-tos
            --email {{ admin_email }}
            -d {{ condenser_ingress_nodeexporter_hostname }}
          args:
            creates: /etc/letsencrypt/live/{{ condenser_ingress_nodeexporter_hostname }}/fullchain.pem

    #### Configure Nginx as Reverse Proxy with SSL
    - name: Configure Nginx for Prometheus, Grafana, and Node Exporter
      copy:
        dest: /etc/nginx/conf.d/monitoring.conf
        mode: '0644'
        content: |
          server {
              listen 443 ssl;
              server_name {{ condenser_ingress_prometheus_hostname }};

              ssl_certificate /etc/letsencrypt/live/{{ condenser_ingress_prometheus_hostname }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ condenser_ingress_prometheus_hostname }}/privkey.pem;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;

              location /prometheus/ {
                  proxy_pass http://localhost:{{ condenser_ingress_prometheus_port }}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }

          server {
              listen 443 ssl;
              server_name {{ condenser_ingress_grafana_hostname }};

              ssl_certificate /etc/letsencrypt/live/{{ condenser_ingress_grafana_hostname }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ condenser_ingress_grafana_hostname }}/privkey.pem;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;

              location /grafana/ {
                  proxy_pass http://localhost:{{ condenser_ingress_grafana_port }}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }

          server {
              listen 443 ssl;
              server_name {{ condenser_ingress_nodeexporter_hostname }};

              ssl_certificate /etc/letsencrypt/live/{{ condenser_ingress_nodeexporter_hostname }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ condenser_ingress_nodeexporter_hostname }}/privkey.pem;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;

              location /node_exporter/ {
                  proxy_pass http://localhost:{{ condenser_ingress_nodeexporter_port }}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }

          server {
              listen 80;
              server_name {{ condenser_ingress_prometheus_hostname }}, {{ condenser_ingress_grafana_hostname }}, {{ condenser_ingress_nodeexporter_hostname }};

              location / {
                  return 301 https://$host$request_uri;
              }
          }
      notify: Reload Nginx

    #### Configure Logging on Management Node
    - name: Configure Logging on Management Node
      block:
        - name: Install rsyslog
          yum:
            name: rsyslog
            state: present

        - name: Configure rsyslog to send logs to control node
          lineinfile:
            path: /etc/rsyslog.conf
            regexp: '^\*\.\*'
            line: "*.* @@{{ ansible_host }}:514"  # Assuming control node is the mgmt node itself
            state: present

        - name: Restart rsyslog
          systemd:
            name: rsyslog
            state: restarted

  handlers:
    - name: Restart Grafana
      systemd:
        name: grafana-server
        state: restarted

    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded
